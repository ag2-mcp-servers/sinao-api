# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T09:23:02+00:00

from __future__ import annotations

from datetime import date as date_aliased
from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import AnyUrl, BaseModel, EmailStr, Field, RootModel, SecretStr, constr


class Account(BaseModel):
    accounting_number: Optional[str] = None
    description: Optional[str] = None
    editable: Optional[bool] = None
    id: Optional[int] = None
    is_associate: Optional[bool] = None
    is_cashflow: Optional[bool] = None
    is_purchase: Optional[bool] = None
    is_sales: Optional[bool] = None
    is_various: Optional[bool] = None
    journalcode: Optional[str] = None
    keywords: Optional[str] = Field(None, description='keywords comma separated')
    name: Optional[str] = None
    need_charge: Optional[bool] = None
    need_employee: Optional[bool] = None
    need_invoice: Optional[bool] = None
    technical_name: Optional[str] = None


class AccountCategory(BaseModel):
    description: Optional[str] = None
    id: Optional[int] = None
    name: Optional[str] = None
    type: Optional[str] = None


class ApiResponse(BaseModel):
    code: Optional[int] = None
    message: Optional[str] = None
    type: Optional[str] = None


class Attachment(BaseModel):
    attachable_id: Optional[str] = None
    attachable_type: Optional[str] = None
    file_url: Optional[str] = None
    id: Optional[int] = None
    name: Optional[str] = None


class Meaning(Enum):
    completed = 'completed'
    remaining = 'remaining'
    overpaid = 'overpaid'


class Balance(BaseModel):
    completed: Optional[bool] = None
    due: Optional[int] = Field(None, description='Initial balance total due')
    meaning: Optional[Meaning] = None
    paid: Optional[int] = None
    remaining: Optional[int] = None


class BankDetails(BaseModel):
    bic: Optional[str] = None
    iban: Optional[str] = None
    id: Optional[int] = None
    name: Optional[str] = None


class CashflowSource(BaseModel):
    account_type: Optional[str] = None
    balance_amount: Optional[int] = None
    created_at: Optional[datetime] = None
    disabled: Optional[int] = None
    id: Optional[int] = None
    identifiant: Optional[str] = None
    name: Optional[str] = None
    parent_cashflow_source: Optional[CashflowSource] = None
    status: Optional[str] = None
    type: Optional[str] = None
    updated_at: Optional[datetime] = None


class Place(BaseModel):
    administrative_area_level1: Optional[str] = None
    administrative_area_level2: Optional[str] = None
    administrative_area_level3: Optional[str] = None
    country: Optional[str] = None
    countryiso2: Optional[str] = None
    formatted_address: Optional[str] = Field(
        None,
        description='When obtaining data, the formatted address is automatically composed from the other properties of the object. When updating data, the formatted address can be used to automatically hydrate the other properties from Google Maps',
    )
    id: Optional[int] = None
    latitude: Optional[int] = None
    locality: Optional[str] = None
    longitude: Optional[int] = None
    postal_code: Optional[str] = None
    route: Optional[str] = None
    route2: Optional[str] = None
    street_number: Optional[str] = None
    sublocality: Optional[str] = None


class EstablishmentIdentity(BaseModel):
    emails: Optional[List[EmailStr]] = None
    id: Optional[int] = Field(
        None,
        description='The identifier of the establishment can be absent if the data comes from the INSEE database. In this case, it is not editable',
    )
    name: Optional[str] = Field(None, description='Establishment name')
    nic: Optional[constr(pattern=r'/^[0-9]{5}$/i')] = Field(
        None, description='Establishment number (french NIC)'
    )
    phones: Optional[List[str]] = None
    place: Optional[Place] = None


class ExportEntity(BaseModel):
    created_at: Optional[datetime] = None
    entries_count: Optional[int] = None
    id: Optional[int] = None
    period_end: Optional[datetime] = None
    period_start: Optional[datetime] = None
    status: Optional[str] = None
    total_credit: Optional[int] = None
    total_debit: Optional[int] = None
    updated_at: Optional[datetime] = None


class ExportFile(BaseModel):
    created_at: Optional[datetime] = None
    downloaded_at: Optional[datetime] = None
    entries_count: Optional[int] = None
    file_size: Optional[int] = None
    file_url: Optional[str] = None
    format: Optional[str] = None
    id: Optional[int] = None
    period_end: Optional[datetime] = None
    period_start: Optional[datetime] = None
    status: Optional[str] = None
    updated_at: Optional[datetime] = None


class Status(Enum):
    draft = 'draft'
    final = 'final'
    paid = 'paid'


class JsonWebToken(BaseModel):
    access_token: Optional[str] = None
    expires_in: Optional[int] = None
    token_type: Optional[str] = None


class OrganizationIdentity(BaseModel):
    billing_name: Optional[str] = Field(None, description='Company name for billing')
    capital: Optional[int] = Field(None, description='Capital in cents')
    closeaccounting_period: Optional[str] = None
    code_naf: Optional[constr(pattern=r'/^[0-9]{4}[a-z]$/i')] = Field(
        None, description='French NAF Code'
    )
    country_iso2: Optional[str] = None
    dissolution_date: Optional[date_aliased] = None
    establishments: Optional[List[EstablishmentIdentity]] = Field(
        None,
        description='List of contact establishments. Some establishments come from the public database (INSEE), they cannot be edited and have no ID',
    )
    founding_date: Optional[date_aliased] = None
    founding_location: Optional[str] = None
    greffe: Optional[str] = Field(None, description='French. Tribunal de commerce')
    id: Optional[int] = None
    legal_form: Optional[str] = None
    logo: Optional[AnyUrl] = None
    name: Optional[str] = Field(None, description='Company name visible on the app')
    national_id: Optional[str] = Field(
        None,
        description='Unique National Id, format by country. **In France : [0-9]{9} with last number as security key.**',
    )
    number_of_employees: Optional[str] = None
    rcs: Optional[str] = Field(
        None, description='French. Registre du Commerce et des Sociétés'
    )
    slogan: Optional[str] = Field(None, description='Free variable')
    tax_id: Optional[str] = Field(None, description='International Tax Id')
    vat_id: Optional[str] = Field(
        None, description='European VAT Id. **In France : FR [0-9]{2} [0-9]{9}**'
    )
    vat_system: Optional[str] = None


class DocumentType(Enum):
    sales = 'sales'
    purchase = 'purchase'


class Source(Enum):
    bank = 'bank'
    cashdesk = 'cashdesk'
    creditnote = 'creditnote'


class PersonIdentity(BaseModel):
    civility: Optional[str] = Field(None, description='Civility is the lastname prefix')
    establishments: Optional[List[EstablishmentIdentity]] = None
    firstname: Optional[str] = None
    id: Optional[int] = None
    image: Optional[AnyUrl] = None
    lastname: Optional[str] = None
    metadata: Optional[List] = None


class PolicyProfile(BaseModel):
    description: Optional[str] = None
    homepage: Optional[AnyUrl] = None
    name: Optional[str] = None
    restricted: Optional[bool] = None
    rights: Optional[List[str]] = Field(None, description='Routes list')
    visible: Optional[int] = None


class Type(Enum):
    buy = 'buy'
    sell = 'sell'
    back = 'back'
    temporaryexit = 'temporaryexit'
    destruct = 'destruct'


class Status1(Enum):
    new = 'new'
    completed = 'completed'
    paid = 'paid'


class VatRepayment(Enum):
    payment = 'payment'
    billing = 'billing'


class Status2(Enum):
    draft = 'draft'
    waiting = 'waiting'
    goodforagreement = 'goodforagreement'
    refused = 'refused'
    transformed = 'transformed'
    deleted = 'deleted'


class Type1(Enum):
    account = 'account'


class Movement(BaseModel):
    amount: Optional[int] = Field(None, description='amount of the transaction')
    id: Optional[int] = Field(None, description='account id')
    type: Optional[Type1] = None


class Type2(Enum):
    transaction = 'transaction'


class Reconciliation(BaseModel):
    id: Optional[int] = Field(None, description='transaction id')
    movements: Optional[List[Movement]] = None
    replace_all: Optional[bool] = None
    type: Optional[Type2] = None


class OrdersPlanItem(BaseModel):
    end_at: Optional[datetime] = None
    model: Optional[int] = None


class AccountingInfos(BaseModel):
    balance_initial_amount: Optional[int] = None
    customer_id: Optional[str] = None
    reference: Optional[str] = None
    supplier_id: Optional[str] = None


class Relationship(BaseModel):
    accounting_infos: Optional[AccountingInfos] = None
    id: Optional[int] = None
    importance_level: Optional[int] = None
    is_customer: Optional[bool] = None
    is_notifying: Optional[bool] = None
    is_prospect: Optional[bool] = None
    is_supplier: Optional[bool] = None
    metadata: Optional[List] = None
    note: Optional[str] = None
    rating: Optional[int] = None


class Rule(BaseModel):
    conditions: Optional[List[List[str]]] = Field(
        None, description='[ [property, comparator, value], ... ]'
    )
    id: Optional[int] = None
    on_event: Optional[str] = None
    parameter: Optional[str] = None
    priority: Optional[int] = None
    value: Optional[str] = None


class Columns(BaseModel):
    amount: Optional[str] = None
    designation: Optional[str] = None
    discount: Optional[str] = None
    due: Optional[str] = None
    info_total_quantity: Optional[str] = None
    quantity: Optional[str] = None
    quantity_name: Optional[str] = None
    subtotal: Optional[str] = None
    vat_percent: Optional[str] = None


class Type3(Enum):
    organization = 'organization'
    person = 'person'


class ContactInfos(BaseModel):
    address: Optional[str] = Field(
        None,
        description='Customer addresss (street number and address) obtained from customer object or set manually',
    )
    address2: Optional[str] = Field(
        None,
        description='Customer address subline obtained from customer object or set manually',
    )
    details: Optional[str] = None
    id: Optional[int] = None
    location: Optional[str] = Field(
        None,
        description='Customer address location (city, postal code and country) obtained from customer object or set manually',
    )
    name: Optional[str] = Field(
        None, description='Customer name obtained from customer object or set manually'
    )
    type: Optional[Type3] = None


class Discount(BaseModel):
    amount: Optional[int] = None
    name: Optional[str] = None
    percent: Optional[int] = None
    value: Optional[int] = Field(
        None, description='Value calculated by amount and percent'
    )


class DownpaymentRequest(BaseModel):
    amount: Optional[int] = None
    percent: Optional[int] = None


class ThirdAccount(BaseModel):
    address: Optional[str] = Field(
        None,
        description='Third account addresss (street number and address) obtained from customer object or set manually',
    )
    id: Optional[int] = None
    location: Optional[str] = Field(
        None,
        description='Third account address location (city, postal code and country) obtained from customer object or set manually',
    )
    name: Optional[str] = Field(
        None,
        description='Third account name obtained from customer object or set manually',
    )
    type: Optional[Type3] = None


class Subtotal(BaseModel):
    by_account: Optional[List[Dict[str, Any]]] = None
    by_vat: Optional[List[Dict[str, Any]]] = None
    total: Optional[int] = None


class Vat(BaseModel):
    by_account: Optional[List[Dict[str, Any]]] = None
    by_vat: Optional[List[Dict[str, Any]]] = None
    total: Optional[int] = None


class Taxes(BaseModel):
    total: Optional[int] = None
    vat: Optional[Vat] = None


class Totals(BaseModel):
    due: Optional[int] = None
    subtotal: Optional[Subtotal] = None
    taxes: Optional[Taxes] = None


class VatExemption(BaseModel):
    article: Optional[str] = None
    exempted: Optional[bool] = None
    reason: Optional[str] = None


class Action(Enum):
    sell = 'sell'
    rent = 'rent'


class Discount1(BaseModel):
    amount: Optional[int] = Field(
        None, description='Use discount value for fix discount'
    )
    percent: Optional[int] = Field(
        None, description='Use discount percent for variable discount'
    )


class Type5(Enum):
    section = 'section'
    description = 'description'
    product = 'product'


class Style(BaseModel):
    position: Optional[int] = None
    section_id: Optional[int] = Field(
        None, description='Section is an Order with a position like SectionId'
    )
    type: Optional[Type5] = None


class Totals1(BaseModel):
    due: Optional[int] = None
    subtotal: Optional[int] = None
    taxes: Optional[int] = None


class AccessLevel(Enum):
    full = 'full'
    start = 'start'
    pro = 'pro'
    restricted = 'restricted'


class Subscription(BaseModel):
    access_level: Optional[AccessLevel] = None
    id: Optional[int] = None
    payment_card: Optional[str] = None
    payment_failed_count: Optional[int] = None
    period_ending_date: Optional[datetime] = None
    period_remaining_days: Optional[int] = None
    period_starting_date: Optional[datetime] = None
    plan_color: Optional[str] = None
    plan_name: Optional[str] = None
    status: Optional[str] = None
    stripe_customer_id: Optional[str] = None
    stripe_plan_id: Optional[str] = None
    stripe_subscription_id: Optional[str] = None


class URSSAFMandate(BaseModel):
    bic: Optional[str] = None
    created_at: Optional[datetime] = None
    iban: Optional[str] = None
    id: Optional[int] = None
    updated_at: Optional[datetime] = None


class User(PersonIdentity):
    created_at: Optional[datetime] = None
    email: Optional[EmailStr] = Field(None, description='Email used as login')
    id: Optional[int] = None
    last_access_at: Optional[datetime] = None
    metadata: Optional[List] = None
    password: Optional[SecretStr] = None
    password_is_undefined: Optional[bool] = None
    updated_at: Optional[datetime] = None


class Comparator(Enum):
    field_ = '='
    field__1 = '<'
    field__2 = '>'
    field__ = '<='
    field___1 = '>='
    field___2 = '!='
    LIKE = 'LIKE'
    IN = 'IN'
    REGEX = 'REGEX'


class Filter(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class Direction(Enum):
    asc = 'asc'
    desc = 'desc'


class OrderItem(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class Filter1(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class Filters(RootModel[List[Filter1]]):
    root: List[Filter1]


class OrderItem1(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class Order(RootModel[List[OrderItem1]]):
    root: List[OrderItem1]


class Filter2(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class OrderItem2(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class AppsAppIdAccessGetResponse(RootModel[List[PolicyProfile]]):
    root: List[PolicyProfile]


class Filter3(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class Filters1(RootModel[List[Filter3]]):
    root: List[Filter3]


class OrderItem3(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class Order1(RootModel[List[OrderItem3]]):
    root: List[OrderItem3]


class Filter4(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class OrderItem4(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class Filter5(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class Filters2(RootModel[List[Filter5]]):
    root: List[Filter5]


class OrderItem5(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class Order2(RootModel[List[OrderItem5]]):
    root: List[OrderItem5]


class AppsAppIdAccessProfilesGetResponse(RootModel[List[PolicyProfile]]):
    root: List[PolicyProfile]


class Filter6(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class OrderItem6(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class AppsAppIdAccountcategoriesGetResponse(RootModel[List[AccountCategory]]):
    root: List[AccountCategory]


class Filter7(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class Filters3(RootModel[List[Filter7]]):
    root: List[Filter7]


class OrderItem7(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class Order3(RootModel[List[OrderItem7]]):
    root: List[OrderItem7]


class Filter8(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class OrderItem8(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class AppsAppIdAccountingEntriesGetResponse(RootModel[List[Account]]):
    root: List[Account]


class Filter9(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class Filters4(RootModel[List[Filter9]]):
    root: List[Filter9]


class OrderItem9(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class Order4(RootModel[List[OrderItem9]]):
    root: List[OrderItem9]


class Filter10(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class OrderItem10(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class AppsAppIdAccountsGetResponse(RootModel[List[Account]]):
    root: List[Account]


class Filter11(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class Filters5(RootModel[List[Filter11]]):
    root: List[Filter11]


class OrderItem11(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class Order5(RootModel[List[OrderItem11]]):
    root: List[OrderItem11]


class Data(RootModel[List[Account]]):
    root: List[Account]


class Filter12(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class OrderItem12(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class AppsAppIdApikeysGetResponse(BaseModel):
    pass


class Filter13(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class Filters6(RootModel[List[Filter13]]):
    root: List[Filter13]


class OrderItem13(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class Order6(RootModel[List[OrderItem13]]):
    root: List[OrderItem13]


class Filter14(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class OrderItem14(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class AppsAppIdApipartnersGetResponse(BaseModel):
    pass


class Filter15(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class Filters7(RootModel[List[Filter15]]):
    root: List[Filter15]


class OrderItem15(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class Order7(RootModel[List[OrderItem15]]):
    root: List[OrderItem15]


class Filter16(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class OrderItem16(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class AppsAppIdAttachmentsGetResponse(RootModel[List[Attachment]]):
    root: List[Attachment]


class Filter17(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class Filters8(RootModel[List[Filter17]]):
    root: List[Filter17]


class OrderItem17(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class Order8(RootModel[List[OrderItem17]]):
    root: List[OrderItem17]


class Type6(Enum):
    none = 'none'
    purchase = 'purchase'
    invoice = 'invoice'
    quote = 'quote'
    transaction = 'transaction'
    relationship = 'relationship'


class Type8(Enum):
    sap = 'sap'


class Ids(RootModel[List[int]]):
    root: List[int]


class Filter18(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class OrderItem18(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class AppsAppIdBankdetailsGetResponse(RootModel[List[BankDetails]]):
    root: List[BankDetails]


class Filter19(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class Filters9(RootModel[List[Filter19]]):
    root: List[Filter19]


class OrderItem19(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class Order9(RootModel[List[OrderItem19]]):
    root: List[OrderItem19]


class AppsAppIdBanksDeleteResponse(BaseModel):
    pass


class AppsAppIdBanksGetResponse(BaseModel):
    pass


class AppsAppIdBanksConnectGetResponse(BaseModel):
    url: Optional[AnyUrl] = None


class AppsAppIdBanksIdFunnelEditGetResponse(BaseModel):
    url: Optional[AnyUrl] = None


class AppsAppIdBanksIdFunnelSyncGetResponse(BaseModel):
    url: Optional[AnyUrl] = None


class AppsAppIdBanksIdFunnelValidateGetResponse(BaseModel):
    url: Optional[AnyUrl] = None


class BankAccountIds(RootModel[Optional[List[int]]]):
    root: Optional[List[int]] = None


class Filter20(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class OrderItem20(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class AppsAppIdCashflowsourcesGetResponse(RootModel[List[CashflowSource]]):
    root: List[CashflowSource]


class Filter21(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class Filters10(RootModel[List[Filter21]]):
    root: List[Filter21]


class OrderItem21(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class Order10(RootModel[List[OrderItem21]]):
    root: List[OrderItem21]


class Type12(Enum):
    bank = 'bank'
    cashdesk = 'cashdesk'
    waiting = 'waiting'


class AccountType(Enum):
    checking = 'checking'
    card = 'card'
    savings = 'savings'
    special = 'special'
    securities = 'securities'
    loan = 'loan'
    life_insurance = 'life_insurance'
    unknown = 'unknown'
    pending = 'pending'
    share_savings_plan = 'share_savings_plan'


class Type16(Enum):
    organization = 'organization'
    person = 'person'


class Contact(BaseModel):
    id: Optional[int] = None
    type: Optional[Type16] = None


class Contact1(BaseModel):
    id: Optional[int] = None
    type: Optional[Type16] = None


class Contacts(RootModel[Optional[List[Contact1]]]):
    root: Optional[List[Contact1]] = None


class Type18(Enum):
    invoice = 'invoice'
    quote = 'quote'
    attachment = 'attachment'


class Document(BaseModel):
    id: Optional[int] = None
    type: Optional[Type18] = None


class Message(BaseModel):
    content: Optional[str] = None
    documents: Optional[List[Document]] = None
    recipients: Optional[List[EmailStr]] = None
    recipients_bcc: Optional[List[EmailStr]] = None
    recipients_cc: Optional[List[EmailStr]] = None
    title: Optional[str] = None


class Document1(BaseModel):
    id: Optional[int] = None
    type: Optional[Type18] = None


class Message1(BaseModel):
    content: Optional[str] = None
    documents: Optional[List[Document1]] = None
    recipients: Optional[List[EmailStr]] = None
    recipients_bcc: Optional[List[EmailStr]] = None
    recipients_cc: Optional[List[EmailStr]] = None
    title: Optional[str] = None


class Messages(RootModel[List[Message1]]):
    root: List[Message1]


class Document2(BaseModel):
    id: Optional[int] = None
    type: Optional[Type18] = None


class Recipients(RootModel[List[EmailStr]]):
    root: List[EmailStr]


class RecipientsCc(RootModel[List[EmailStr]]):
    root: List[EmailStr]


class RecipientsBcc(RootModel[List[EmailStr]]):
    root: List[EmailStr]


class Document3(BaseModel):
    id: Optional[int] = None
    type: Optional[Type18] = None


class Documents(RootModel[List[Document3]]):
    root: List[Document3]


class Place1(BaseModel):
    administrative_area_level1: Optional[str] = None
    administrative_area_level2: Optional[str] = None
    administrative_area_level3: Optional[str] = None
    country: Optional[str] = None
    countryiso2: Optional[str] = None
    formatted_address: Optional[str] = Field(
        None, description='Address formatted for intelligent analysis by google maps'
    )
    latitude: Optional[int] = None
    locality: Optional[str] = None
    longitude: Optional[int] = None
    postal_code: Optional[str] = None
    route: Optional[str] = None
    route2: Optional[str] = None
    street_number: Optional[str] = None
    sublocality: Optional[str] = None


class Phones(RootModel[List[str]]):
    root: List[str]


class Emails(RootModel[List[str]]):
    root: List[str]


class Filter22(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class OrderItem22(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class AppsAppIdExportsGetResponse(RootModel[List[ExportEntity]]):
    root: List[ExportEntity]


class Filter23(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class Filters11(RootModel[List[Filter23]]):
    root: List[Filter23]


class OrderItem23(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class Order11(RootModel[List[OrderItem23]]):
    root: List[OrderItem23]


class AppsAppIdExportsAcdComptaGetResponse(BaseModel):
    uuid: Optional[str] = None


class AppsAppIdExportsAcdComptaPostResponse(BaseModel):
    uuid: Optional[str] = None


class Format(Enum):
    universal = 'universal'
    quadra = 'quadra'
    fiducial = 'fiducial'
    acd = 'acd'


class ExportEntitiesIds(RootModel[List[int]]):
    root: List[int]


class AppsAppIdExportsMonthsGetResponse(RootModel[List[ExportEntity]]):
    root: List[ExportEntity]


class Filter24(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class OrderItem24(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class Filter25(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class Filters12(RootModel[List[Filter25]]):
    root: List[Filter25]


class OrderItem25(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class Order12(RootModel[List[OrderItem25]]):
    root: List[OrderItem25]


class Type22(Enum):
    organization = 'organization'
    person = 'person'


class ContactInfos1(BaseModel):
    address: Optional[str] = Field(
        None,
        description='Customer addresss (street number and address) obtained from customer object or set manually',
    )
    address2: Optional[str] = Field(
        None,
        description='Customer address subline obtained from customer object or set manually',
    )
    details: Optional[str] = None
    id: Optional[int] = None
    location: Optional[str] = Field(
        None,
        description='Customer address location (city, postal code and country) obtained from customer object or set manually',
    )
    name: Optional[str] = Field(
        None, description='Customer name obtained from customer object or set manually'
    )
    type: Optional[Type22] = None


class ThirdAccount1(BaseModel):
    address: Optional[str] = Field(
        None,
        description='Third account addresss (street number and address) obtained from customer object or set manually',
    )
    id: Optional[int] = None
    location: Optional[str] = Field(
        None,
        description='Third account address location (city, postal code and country) obtained from customer object or set manually',
    )
    name: Optional[str] = Field(
        None,
        description='Third account name obtained from customer object or set manually',
    )
    type: Optional[Type22] = None


class Discount2(BaseModel):
    amount: Optional[int] = None
    name: Optional[str] = None
    percent: Optional[int] = None


class VatExemption1(BaseModel):
    article: Optional[str] = None
    exempted: Optional[bool] = Field(None, description='specify if exempted or not')
    reason: Optional[str] = Field(
        None, description='example : micro for microentrepreneur'
    )


class ContactInfos2(BaseModel):
    address: Optional[str] = Field(
        None,
        description='Customer addresss (street number and address) obtained from customer object or set manually',
    )
    address2: Optional[str] = Field(
        None,
        description='Customer address subline obtained from customer object or set manually',
    )
    details: Optional[str] = None
    id: Optional[int] = None
    location: Optional[str] = Field(
        None,
        description='Customer address location (city, postal code and country) obtained from customer object or set manually',
    )
    name: Optional[str] = Field(
        None, description='Customer name obtained from customer object or set manually'
    )
    type: Optional[Type22] = None


class ThirdAccount2(BaseModel):
    address: Optional[str] = Field(
        None,
        description='Third account addresss (street number and address) obtained from customer object or set manually',
    )
    id: Optional[int] = None
    location: Optional[str] = Field(
        None,
        description='Third account address location (city, postal code and country) obtained from customer object or set manually',
    )
    name: Optional[str] = Field(
        None,
        description='Third account name obtained from customer object or set manually',
    )
    type: Optional[Type22] = None


class Tags(RootModel[Optional[List[Any]]]):
    root: Optional[List[Any]] = None


class Metadata(RootModel[Optional[List]]):
    root: Optional[List] = None


class Downpayments(RootModel[Optional[List[int]]]):
    root: Optional[List[int]] = None


class Template(Enum):
    delivery = 'delivery'
    command = 'command'


class AppsAppIdInvoicesFreshPostResponse(BaseModel):
    pass


class Filter26(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class AppsAppIdInvoicesStatisticsGetResponse(BaseModel):
    pass


class Filter27(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class Filters13(RootModel[List[Filter27]]):
    root: List[Filter27]


class ContactInfos3(BaseModel):
    address: Optional[str] = Field(
        None,
        description='Customer addresss (street number and address) obtained from customer object or set manually',
    )
    address2: Optional[str] = Field(
        None,
        description='Customer address subline obtained from customer object or set manually',
    )
    details: Optional[str] = None
    id: Optional[int] = None
    location: Optional[str] = Field(
        None,
        description='Customer address location (city, postal code and country) obtained from customer object or set manually',
    )
    name: Optional[str] = Field(
        None, description='Customer name obtained from customer object or set manually'
    )
    type: Optional[Type22] = None


class ThirdAccount3(BaseModel):
    address: Optional[str] = Field(
        None,
        description='Third account addresss (street number and address) obtained from customer object or set manually',
    )
    id: Optional[int] = None
    location: Optional[str] = Field(
        None,
        description='Third account address location (city, postal code and country) obtained from customer object or set manually',
    )
    name: Optional[str] = Field(
        None,
        description='Third account name obtained from customer object or set manually',
    )
    type: Optional[Type22] = None


class ContactInfos4(BaseModel):
    address: Optional[str] = Field(
        None,
        description='Customer addresss (street number and address) obtained from customer object or set manually',
    )
    address2: Optional[str] = Field(
        None,
        description='Customer address subline obtained from customer object or set manually',
    )
    details: Optional[str] = None
    id: Optional[int] = None
    location: Optional[str] = Field(
        None,
        description='Customer address location (city, postal code and country) obtained from customer object or set manually',
    )
    name: Optional[str] = Field(
        None, description='Customer name obtained from customer object or set manually'
    )
    type: Optional[Type22] = None


class ThirdAccount4(BaseModel):
    address: Optional[str] = Field(
        None,
        description='Third account addresss (street number and address) obtained from customer object or set manually',
    )
    id: Optional[int] = None
    location: Optional[str] = Field(
        None,
        description='Third account address location (city, postal code and country) obtained from customer object or set manually',
    )
    name: Optional[str] = Field(
        None,
        description='Third account name obtained from customer object or set manually',
    )
    type: Optional[Type22] = None


class Status3(Enum):
    draft = 'draft'
    final = 'final'
    paid = 'paid'


class Filter28(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class OrderItem26(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class Filter29(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class Filters14(RootModel[List[Filter29]]):
    root: List[Filter29]


class OrderItem27(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class Order13(RootModel[List[OrderItem27]]):
    root: List[OrderItem27]


class Logo(RootModel[Union[str, AnyUrl]]):
    root: Union[str, AnyUrl]


class Filter30(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class OrderItem28(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class Filter31(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class Filters15(RootModel[List[Filter31]]):
    root: List[Filter31]


class OrderItem29(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class Order14(RootModel[List[OrderItem29]]):
    root: List[OrderItem29]


class Filter32(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class OrderItem30(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class Filter33(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class Filters16(RootModel[List[Filter33]]):
    root: List[Filter33]


class OrderItem31(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class Order15(RootModel[List[OrderItem31]]):
    root: List[OrderItem31]


class Filter34(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class OrderItem32(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class Filter35(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class Filters17(RootModel[List[Filter35]]):
    root: List[Filter35]


class OrderItem33(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class Order16(RootModel[List[OrderItem33]]):
    root: List[OrderItem33]


class Picture(RootModel[Union[str, AnyUrl]]):
    root: Union[str, AnyUrl]


class Filter36(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class OrderItem34(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class Filter37(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class Filters18(RootModel[List[Filter37]]):
    root: List[Filter37]


class OrderItem35(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class Order17(RootModel[List[OrderItem35]]):
    root: List[OrderItem35]


class Image(RootModel[Union[bytes, AnyUrl]]):
    root: Union[bytes, AnyUrl]


class Filter38(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class OrderItem36(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class Filter39(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class Filters19(RootModel[List[Filter39]]):
    root: List[Filter39]


class OrderItem37(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class Order18(RootModel[List[OrderItem37]]):
    root: List[OrderItem37]


class Type30(Enum):
    product = 'product'
    service = 'service'


class Tags2(RootModel[List[Any]]):
    root: List[Any]


class Filter40(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class OrderItem38(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class Filter41(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class Filters20(RootModel[List[Filter41]]):
    root: List[Filter41]


class OrderItem39(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class Order19(RootModel[List[OrderItem39]]):
    root: List[OrderItem39]


class Filter42(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class OrderItem40(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class ExpandEnum(Enum):
    account = 'account'
    supplier = 'supplier'
    balance = 'balance'


class Filter43(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class Filters21(RootModel[List[Filter43]]):
    root: List[Filter43]


class OrderItem41(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class Order20(RootModel[List[OrderItem41]]):
    root: List[OrderItem41]


class Expand(RootModel[List[ExpandEnum]]):
    root: List[ExpandEnum]


class VatDetail(BaseModel):
    pass


class Filter44(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class AppsAppIdPurchasesStatisticsGetResponse(BaseModel):
    pass


class Filter45(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class Filters22(RootModel[List[Filter45]]):
    root: List[Filter45]


class PurchaseLine1(BaseModel):
    account_id: Optional[int] = None
    amount: Optional[int] = None


class PurchaseLines(RootModel[List[PurchaseLine1]]):
    root: List[PurchaseLine1]


class Status5(Enum):
    completed = 'completed'
    paid = 'paid'


class Filter46(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class OrderItem42(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class Filter47(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class Filters23(RootModel[List[Filter47]]):
    root: List[Filter47]


class OrderItem43(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class Order21(RootModel[List[OrderItem43]]):
    root: List[OrderItem43]


class Type34(Enum):
    organization = 'organization'
    person = 'person'


class ContactInfos5(BaseModel):
    address: Optional[str] = Field(
        None,
        description='Customer addresss (street number and address) obtained from customer object or set manually',
    )
    address2: Optional[str] = Field(
        None,
        description='Customer address subline obtained from customer object or set manually',
    )
    details: Optional[str] = None
    id: Optional[int] = None
    location: Optional[str] = Field(
        None,
        description='Customer address location (city, postal code and country) obtained from customer object or set manually',
    )
    name: Optional[str] = Field(
        None, description='Customer name obtained from customer object or set manually'
    )
    type: Optional[Type34] = None


class ThirdAccount5(BaseModel):
    address: Optional[str] = Field(
        None,
        description='Third account addresss (street number and address) obtained from customer object or set manually',
    )
    id: Optional[int] = None
    location: Optional[str] = Field(
        None,
        description='Third account address location (city, postal code and country) obtained from customer object or set manually',
    )
    name: Optional[str] = Field(
        None,
        description='Third account name obtained from customer object or set manually',
    )
    type: Optional[Type34] = None


class VatExemption5(BaseModel):
    article: Optional[str] = None
    exempted: Optional[bool] = None
    reason: Optional[str] = None


class DownpaymentRequest1(BaseModel):
    amount: Optional[int] = Field(
        None, description='Use downpayment request value for fix downpayment'
    )
    percent: Optional[int] = Field(
        None, description='Use downpayment request in percent for variable downpayment'
    )


class ContactInfos6(BaseModel):
    address: Optional[str] = Field(
        None,
        description='Customer addresss (street number and address) obtained from customer object or set manually',
    )
    address2: Optional[str] = Field(
        None,
        description='Customer address subline obtained from customer object or set manually',
    )
    details: Optional[str] = None
    id: Optional[int] = None
    location: Optional[str] = Field(
        None,
        description='Customer address location (city, postal code and country) obtained from customer object or set manually',
    )
    name: Optional[str] = Field(
        None, description='Customer name obtained from customer object or set manually'
    )
    type: Optional[Type34] = None


class ThirdAccount6(BaseModel):
    address: Optional[str] = Field(
        None,
        description='Third account addresss (street number and address) obtained from customer object or set manually',
    )
    id: Optional[int] = None
    location: Optional[str] = Field(
        None,
        description='Third account address location (city, postal code and country) obtained from customer object or set manually',
    )
    name: Optional[str] = Field(
        None,
        description='Third account name obtained from customer object or set manually',
    )
    type: Optional[Type34] = None


class AppsAppIdQuotesFreshPostResponse(BaseModel):
    pass


class Filter48(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class AppsAppIdQuotesStatisticsGetResponse(BaseModel):
    pass


class Filter49(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class Filters24(RootModel[List[Filter49]]):
    root: List[Filter49]


class ContactInfos7(BaseModel):
    address: Optional[str] = Field(
        None,
        description='Customer addresss (street number and address) obtained from customer object or set manually',
    )
    address2: Optional[str] = Field(
        None,
        description='Customer address subline obtained from customer object or set manually',
    )
    details: Optional[str] = None
    id: Optional[int] = None
    location: Optional[str] = Field(
        None,
        description='Customer address location (city, postal code and country) obtained from customer object or set manually',
    )
    name: Optional[str] = Field(
        None, description='Customer name obtained from customer object or set manually'
    )
    type: Optional[Type34] = None


class ThirdAccount7(BaseModel):
    address: Optional[str] = Field(
        None,
        description='Third account addresss (street number and address) obtained from customer object or set manually',
    )
    id: Optional[int] = None
    location: Optional[str] = Field(
        None,
        description='Third account address location (city, postal code and country) obtained from customer object or set manually',
    )
    name: Optional[str] = Field(
        None,
        description='Third account name obtained from customer object or set manually',
    )
    type: Optional[Type34] = None


class ContactInfos8(BaseModel):
    address: Optional[str] = Field(
        None,
        description='Customer addresss (street number and address) obtained from customer object or set manually',
    )
    address2: Optional[str] = Field(
        None,
        description='Customer address subline obtained from customer object or set manually',
    )
    details: Optional[str] = None
    id: Optional[int] = None
    location: Optional[str] = Field(
        None,
        description='Customer address location (city, postal code and country) obtained from customer object or set manually',
    )
    name: Optional[str] = Field(
        None, description='Customer name obtained from customer object or set manually'
    )
    type: Optional[Type34] = None


class ThirdAccount8(BaseModel):
    address: Optional[str] = Field(
        None,
        description='Third account addresss (street number and address) obtained from customer object or set manually',
    )
    id: Optional[int] = None
    location: Optional[str] = Field(
        None,
        description='Third account address location (city, postal code and country) obtained from customer object or set manually',
    )
    name: Optional[str] = Field(
        None,
        description='Third account name obtained from customer object or set manually',
    )
    type: Optional[Type34] = None


class Status7(Enum):
    waiting = 'waiting'
    goodforagreement = 'goodforagreement'
    refused = 'refused'
    transformed = 'transformed'
    deleted = 'deleted'


class Type42(Enum):
    transaction = 'transaction'
    sales = 'sales'
    purchase = 'purchase'


class Type45(Enum):
    account = 'account'
    purchase = 'purchase'
    sales = 'sales'
    bank_entry = 'bank_entry'
    cashdesk_entry = 'cashdesk_entry'
    waiting_entry = 'waiting_entry'


class Movements(BaseModel):
    amount: Optional[int] = Field(None, description='Payment amount in cents')
    id: Optional[int] = Field(
        None,
        description='Object id -- create object when null (usefull for cashdesk or waiting entries)',
    )
    type: Optional[Type45] = None


class Rule1(BaseModel):
    conditions: Optional[List[List[str]]] = Field(
        None, description='[ [property, comparator, value], ... ]'
    )
    on_event: Optional[str] = Field(
        None,
        description='Event like model.event, event in [saved, created, updated, deleted]',
        examples=['transaction.created'],
    )
    parameter: Optional[str] = Field(None, examples=['account'])
    value: Optional[str] = Field(None, examples=['64'])


class Type46(Enum):
    transaction = 'transaction'
    sales = 'sales'
    purchase = 'purchase'


class Type47(Enum):
    account = 'account'
    purchase = 'purchase'
    sales = 'sales'
    bank_entry = 'bank_entry'
    cashdesk_entry = 'cashdesk_entry'
    waiting_entry = 'waiting_entry'


class Movements1(BaseModel):
    amount: Optional[int] = Field(None, description='Payment amount in cents')
    id: Optional[int] = Field(
        None,
        description='Object id -- create object when null (usefull for cashdesk or waiting entries)',
    )
    type: Optional[Type47] = None


class Data7(RootModel[List[Reconciliation]]):
    root: List[Reconciliation]


class Filter50(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class OrderItem44(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class Filter51(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class Filters25(RootModel[List[Filter51]]):
    root: List[Filter51]


class OrderItem45(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class Order22(RootModel[List[OrderItem45]]):
    root: List[OrderItem45]


class Type48(Enum):
    organization = 'organization'
    person = 'person'


class ContactInfos9(BaseModel):
    address: Optional[str] = Field(
        None,
        description='Customer addresss (street number and address) obtained from customer object or set manually',
    )
    address2: Optional[str] = Field(
        None,
        description='Customer address subline obtained from customer object or set manually',
    )
    details: Optional[str] = None
    id: Optional[int] = None
    location: Optional[str] = Field(
        None,
        description='Customer address location (city, postal code and country) obtained from customer object or set manually',
    )
    name: Optional[str] = Field(
        None, description='Customer name obtained from customer object or set manually'
    )
    type: Optional[Type48] = None


class FrequencyDuration(Enum):
    day = 'day'
    week = 'week'
    month = 'month'
    trimester = 'trimester'
    semester = 'semester'
    year = 'year'


class DiscountMode(Enum):
    percent = 'percent'


class ContactInfos10(BaseModel):
    address: Optional[str] = Field(
        None,
        description='Customer addresss (street number and address) obtained from customer object or set manually',
    )
    address2: Optional[str] = Field(
        None,
        description='Customer address subline obtained from customer object or set manually',
    )
    details: Optional[str] = None
    id: Optional[int] = None
    location: Optional[str] = Field(
        None,
        description='Customer address location (city, postal code and country) obtained from customer object or set manually',
    )
    name: Optional[str] = Field(
        None, description='Customer name obtained from customer object or set manually'
    )
    type: Optional[Type48] = None


class Tags8(RootModel[Optional[List[Any]]]):
    root: Optional[List[Any]] = None


class OrdersPlan(RootModel[Optional[List[OrdersPlanItem]]]):
    root: Optional[List[OrdersPlanItem]] = None


class AppsAppIdRecurringinvoicesPeriodsGetResponse(RootModel[List]):
    root: List


class ContactInfos11(BaseModel):
    address: Optional[str] = Field(
        None,
        description='Customer addresss (street number and address) obtained from customer object or set manually',
    )
    address2: Optional[str] = Field(
        None,
        description='Customer address subline obtained from customer object or set manually',
    )
    details: Optional[str] = None
    id: Optional[int] = None
    location: Optional[str] = Field(
        None,
        description='Customer address location (city, postal code and country) obtained from customer object or set manually',
    )
    name: Optional[str] = Field(
        None, description='Customer name obtained from customer object or set manually'
    )
    type: Optional[Type48] = None


class ContactInfos12(BaseModel):
    address: Optional[str] = Field(
        None,
        description='Customer addresss (street number and address) obtained from customer object or set manually',
    )
    address2: Optional[str] = Field(
        None,
        description='Customer address subline obtained from customer object or set manually',
    )
    details: Optional[str] = None
    id: Optional[int] = None
    location: Optional[str] = Field(
        None,
        description='Customer address location (city, postal code and country) obtained from customer object or set manually',
    )
    name: Optional[str] = Field(
        None, description='Customer name obtained from customer object or set manually'
    )
    type: Optional[Type48] = None


class OrdersPlan1(RootModel[Optional[List[OrdersPlanItem]]]):
    root: Optional[List[OrdersPlanItem]] = None


class Filter52(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class OrderItem46(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class AppsAppIdRelationshipsGetResponse(RootModel[List[Relationship]]):
    root: List[Relationship]


class Filter53(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class Filters26(RootModel[List[Filter53]]):
    root: List[Filter53]


class OrderItem47(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class Order23(RootModel[List[OrderItem47]]):
    root: List[OrderItem47]


class Filter54(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class OrderItem48(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class AppsAppIdRulesGetResponse(RootModel[List[Rule]]):
    root: List[Rule]


class Filter55(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class Filters27(RootModel[List[Filter55]]):
    root: List[Filter55]


class OrderItem49(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class Order24(RootModel[List[OrderItem49]]):
    root: List[OrderItem49]


class Conditions(RootModel[List[List[str]]]):
    root: List[List[str]] = Field(
        ..., description='[ [property, comparator, value], ... ]'
    )


class Filter56(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class OrderItem50(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class Filter57(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class Filters28(RootModel[List[Filter57]]):
    root: List[Filter57]


class OrderItem51(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class Order25(RootModel[List[OrderItem51]]):
    root: List[OrderItem51]


class Filter58(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class OrderItem52(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class Filter59(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class Filters29(RootModel[List[Filter59]]):
    root: List[Filter59]


class OrderItem53(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class Order26(RootModel[List[OrderItem53]]):
    root: List[OrderItem53]


class AppsAppIdSepamandatesCredittransferGetResponse(BaseModel):
    pass


class Amounts(RootModel[List[int]]):
    root: List[int]


class AppsAppIdSepamandatesDirectdebitGetResponse(BaseModel):
    pass


class InvoicesIds(RootModel[List[int]]):
    root: List[int]


class AppsAppIdSettingsGetResponse(BaseModel):
    pass


class Settings(RootModel[Optional[Dict[str, str]]]):
    root: Optional[Dict[str, str]] = None


class Period(Enum):
    hourly = 'hourly'
    daily = 'daily'
    weekly = 'weekly'
    monthly = 'monthly'
    quarterly = 'quarterly'
    yearly = 'yearly'


class Object(Enum):
    invoice = 'invoice'
    quote = 'quote'
    purchase = 'purchase'
    transaction = 'transaction'
    payment = 'payment'
    relationship = 'relationship'


class Calcul(Enum):
    sum = 'sum'
    avg = 'avg'
    count = 'count'


class AppsAppIdStatisticsChartsTypeGetResponse(RootModel[List[Dict[str, Any]]]):
    root: List[Dict[str, Any]]


class Methods(RootModel[List[List[str]]]):
    root: List[List[str]]


class GroupBy(RootModel[List[str]]):
    root: List[str]


class ExcludeKeys(RootModel[List[int]]):
    root: List[int]


class Filters30(BaseModel):
    pass


class Groups(RootModel[List[List[int]]]):
    root: List[List[int]] = Field(..., description='Array of intervals in days count')


class Period2(Enum):
    monthly = 'monthly'
    quarterly = 'quarterly'
    half_yearly = 'half-yearly'
    yearly = 'yearly'


class AppsAppIdStatisticsVatGetResponse(BaseModel):
    pass


class AppsAppIdSubscriptionPlanGetResponse(BaseModel):
    extras: Optional[List[str]] = None
    plans: Optional[List[str]] = None


class AppsAppIdSubscriptionPlansGetResponse(BaseModel):
    extras: Optional[List[str]] = None
    plans: Optional[List[str]] = None


class Object2(Enum):
    invoice = 'invoice'
    quote = 'quote'
    purchase = 'purchase'
    product = 'product'


class AppsAppIdTagsGetResponse(RootModel[List[Dict[str, Any]]]):
    root: List[Dict[str, Any]]


class Data9(RootModel[List]):
    root: List


class Filter60(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class OrderItem54(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class Filter61(BaseModel):
    comparator: Optional[Comparator] = None
    name: Optional[str] = None
    value: Optional[str] = None


class Filters31(RootModel[List[Filter61]]):
    root: List[Filter61]


class OrderItem55(BaseModel):
    direction: Optional[Direction] = None
    name: Optional[str] = None


class Order27(RootModel[List[OrderItem55]]):
    root: List[OrderItem55]


class Method(Enum):
    check = 'check'
    transfer = 'transfer'
    cash = 'cash'
    creditcard = 'creditcard'
    automatic_debit = 'automatic_debit'
    creditnote = 'creditnote'


class AppsAppIdUrssafPaymentGetResponse(BaseModel):
    pass


class Type52(Enum):
    invoice = 'invoice'
    quote = 'quote'
    contact = 'contact'


class AppsAppIdUrssafPreviewGetResponse(BaseModel):
    pass


ContactOrganization = OrganizationIdentity


ContactPerson = PersonIdentity


class Purchase(BaseModel):
    account: Optional[Account] = None
    accounted_at: Optional[datetime] = Field(
        None, description='Date on which the accounting entries were generated'
    )
    amount: Optional[int] = Field(None, description='Amount without taxes in cents')
    amount_net_foreign_currency: Optional[int] = Field(
        None, description='Amount without taxes in cents'
    )
    amount_tax: Optional[int] = Field(None, description='Amount of taxes in cents')
    balance: Optional[Balance] = None
    billed_at: Optional[datetime] = Field(None, description='Date of invoice')
    comment: Optional[str] = Field(None, description='free field')
    completed_at: Optional[datetime] = Field(
        None,
        description='Date on which the account, supplier, amount and billed_at fields were completed',
    )
    foreign_currency: Optional[str] = Field(
        None, description='Amount of taxes in cents'
    )
    id: Optional[int] = None
    is_late: Optional[bool] = Field(
        None,
        description='The payment deadline has passed and full payment has not been received',
    )
    md5: Optional[str] = Field(None, description='Md5 hash of the initial file sent')
    paid_at: Optional[datetime] = Field(
        None, description='Date on which the invoice was fully paid'
    )
    payment_account_number: Optional[str] = Field(
        None, description='Payment Account number'
    )
    payment_deadline_at: Optional[datetime] = Field(
        None, description='Payment deadline'
    )
    payment_iban: Optional[str] = Field(None, description='Payment IBAN')
    payment_routing_number: Optional[str] = Field(
        None, description='Payment Routing number'
    )
    payment_swift: Optional[str] = Field(None, description='Payment SWIFT')
    picture: Optional[str] = Field(None, description='Purchase picture')
    status: Optional[Status1] = None
    supplier: Optional[ContactOrganization] = None
    supplier_name: Optional[str] = None
    tags: Optional[List[str]] = None
    title: Optional[str] = Field(
        None, description='Name visible on the accounting entries of the purchase'
    )
    vat_detail: Optional[Dict[str, Any]] = Field(None, description='VAT breakdown')
    vat_repayment: Optional[VatRepayment] = Field(
        None,
        description='In France, depending on the type of purchase (product or service), VAT is not payable at the same time. VAT on products is due on the date of the invoice, while VAT on services is due on the date of payment thereof',
    )
    will_be_late_at: Optional[datetime] = Field(
        None,
        description='Date the payment will be late. Is `false` if payment has been made',
    )


class SEPAMandate(BaseModel):
    author: Optional[User] = None
    bic: Optional[str] = None
    created_at: Optional[datetime] = None
    customer: Optional[Union[ContactPerson, ContactOrganization]] = None
    customer_name: Optional[str] = None
    electronic_signature: Optional[str] = None
    iban: Optional[str] = None
    id: Optional[int] = None
    is_first: Optional[int] = None
    last_debit_amount: Optional[int] = None
    last_debit_at: Optional[datetime] = None
    last_debit_id: Optional[int] = None
    logs_sepa_direct_debits: Optional[str] = None
    mandate_id: Optional[int] = None
    old_mandate_id: Optional[int] = None
    signed_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None


class Transaction(BaseModel):
    amount: Optional[int] = None
    author: Optional[User] = None
    cashflow_source: Optional[CashflowSource] = None
    contact: Optional[Union[ContactPerson, ContactOrganization]] = None
    created_at: Optional[datetime] = None
    deleted_at: Optional[datetime] = None
    details: Optional[int] = None
    id: Optional[int] = None
    label: Optional[int] = None
    lettered_at: Optional[datetime] = None
    metadata: Optional[List] = None
    method: Optional[int] = None
    received_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None


class AppsAppIdOrganizationsGetResponse(RootModel[List[ContactOrganization]]):
    root: List[ContactOrganization]


class Data2(RootModel[List[ContactOrganization]]):
    root: List[ContactOrganization]


class AppsAppIdPersonsGetResponse(RootModel[List[ContactPerson]]):
    root: List[ContactPerson]


class Data3(RootModel[List[ContactPerson]]):
    root: List[ContactPerson]


class AppsAppIdPurchasesGetResponse(RootModel[List[Purchase]]):
    root: List[Purchase]


class Data5(RootModel[List[Purchase]]):
    root: List[Purchase]


class AppsAppIdSepamandatesGetResponse(RootModel[List[SEPAMandate]]):
    root: List[SEPAMandate]


class AppsAppIdStatisticsTimetablePurchasesGetResponseItem(BaseModel):
    balance: Optional[int] = None
    count: Optional[int] = None
    data: Optional[List[Purchase]] = None
    interval: Optional[List[datetime]] = None


class AppsAppIdStatisticsTimetablePurchasesGetResponse(
    RootModel[List[AppsAppIdStatisticsTimetablePurchasesGetResponseItem]]
):
    root: List[AppsAppIdStatisticsTimetablePurchasesGetResponseItem]


class AppsAppIdTransactionsGetResponse(RootModel[List[Transaction]]):
    root: List[Transaction]


class Data10(RootModel[List[Transaction]]):
    root: List[Transaction]


class AccessInvitation(BaseModel):
    app: Optional[App] = None
    id: Optional[int] = None
    profile: Optional[PolicyProfile] = None
    recipient_user: Optional[User] = None
    sender_user: Optional[User] = None
    used_at: Optional[datetime] = None
    validity: Optional[datetime] = None


class App(BaseModel):
    admin: Optional[User] = None
    config: Optional[List] = None
    hostname_alias: Optional[
        constr(
            pattern=r'^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]{0,61}[A-Za-z0-9])$'
        )
    ] = Field(
        None,
        description='Specific hostname for this app. To use default URI, null this param',
    )
    id: Optional[int] = None
    last_access_at: Optional[datetime] = None
    last_user: Optional[User] = None
    organization: Optional[SinaoOrganization] = None
    policies: Optional[List[UserPolicy]] = None
    subscription: Optional[Subscription] = None
    url: Optional[AnyUrl] = Field(
        None, description='URI to this app. Can be overwrited by hostname_alias param'
    )


class Payment(BaseModel):
    amount: Optional[int] = None
    date: Optional[datetime] = None
    document: Optional[Union[Invoice, Purchase]] = None
    document_type: Optional[DocumentType] = None
    id: Optional[int] = None
    source: Optional[Source] = None
    transaction: Optional[Transaction] = None


class Product(BaseModel):
    accounting_number: Optional[str] = None
    amount_accurately: Optional[int] = Field(
        None, description='Price without taxes in milli-cents'
    )
    category: Optional[ProductCategory] = None
    currency: Optional[str] = None
    description: Optional[str] = None
    id: Optional[int] = None
    image: Optional[Union[bytes, AnyUrl]] = None
    intangible: Optional[bool] = Field(None, description='Is a service or a product ?')
    lifetime: Optional[int] = Field(None, description='Product life time in seconds')
    metadata: Optional[List] = None
    name: Optional[str] = None
    quantity_name: Optional[str] = Field(
        None, description='Name of the quantity: days, liters, m2, m3...'
    )
    reference: Optional[str] = None
    tags: Optional[List[str]] = None
    unity: Optional[str] = Field(
        None, description='Unity, hours, days, meters, liters..'
    )
    vat_percent: Optional[int] = Field(None, description='VAT rate in cents')


class ProductCategory(BaseModel):
    id: Optional[int] = None
    image: Optional[Union[bytes, AnyUrl]] = None
    name: Optional[str] = None
    parent: Optional[ProductCategory] = None
    products: Optional[Product] = None


class ProductStock(BaseModel):
    bar_code: Optional[int] = None
    cost_amount: Optional[int] = None
    entered_at: Optional[int] = None
    expired_at: Optional[int] = None
    id: Optional[int] = None
    initial_quantity: Optional[int] = None
    location: Optional[int] = None
    product: Optional[Product] = None
    product_stocks_movements: Optional[List[ProductStocksMovement]] = None
    purchase: Optional[Purchase] = None
    quantity_in: Optional[int] = None
    quantity_out: Optional[int] = None
    sales_lines: Optional[List[SalesLine]] = None
    use_duration: Optional[int] = None


class ProductStocksMovement(BaseModel):
    description: Optional[str] = None
    future_return_date: Optional[datetime] = None
    id: Optional[int] = None
    invoice: Optional[Invoice] = None
    moved_at: Optional[datetime] = None
    product_stock: Optional[ProductStock] = None
    quantity: Optional[int] = None
    type: Optional[Type] = None
    use_duration: Optional[int] = Field(None, description='Usage duration in seconds')


class PurchaseLine(BaseModel):
    account: Optional[Account] = None
    amount: Optional[int] = None
    created_at: Optional[datetime] = None
    id: Optional[int] = None
    product: Optional[Product] = None
    title: Optional[str] = None
    updated_at: Optional[datetime] = None


class SalesDocumentContract(BaseModel):
    attachments: Optional[List[AnyUrl]] = None
    author: Optional[User] = None
    balance: Optional[Balance] = None
    bank_detail: Optional[BankDetails] = None
    columns: Optional[Columns] = Field(
        None, description='Columns titles. Remove or NULL a property to hide a column'
    )
    contact_infos: Optional[ContactInfos] = None
    content: Optional[List[SalesLine]] = None
    currency: Optional[str] = None
    customer: Optional[Union[ContactPerson, ContactOrganization]] = None
    discount: Optional[Discount] = None
    downpayment_request: Optional[DownpaymentRequest] = Field(
        None,
        description='Amount of deposit required on the quote. On an invoice, this deposit represents a cash advance to be deducted from the payment but not from the amount of the invoice',
    )
    email_sent_at: Optional[datetime] = None
    id: Optional[int] = None
    imported_at: Optional[datetime] = None
    legal_notice: Optional[str] = Field(None, description='Legal mentions')
    metadata: Optional[List] = None
    note: Optional[str] = Field(None, description='Private note')
    number: Optional[str] = None
    reference: Optional[str] = Field(
        None, description='Free variable not display in document'
    )
    tags: Optional[List[Any]] = None
    third_account: Optional[ThirdAccount] = None
    title: Optional[str] = None
    totals: Optional[Totals] = None
    validated_at: Optional[datetime] = None
    vat_exemption: Optional[VatExemption] = None
    written_at: Optional[datetime] = None


class SalesDocumentModel(BaseModel):
    id: Optional[int] = None
    json_: Optional[List[SalesLine]] = Field(None, alias='json')
    name: Optional[str] = None
    title: Optional[str] = None


class SalesLine(BaseModel):
    account: Optional[Dict[str, Any]] = None
    action: Optional[Action] = None
    amount: Optional[int] = Field(None, description='Price without taxes in cents')
    amount_accurately: Optional[int] = Field(
        None,
        description='Price without taxes in cents + 3 decimales, example : 9899000 = 98,99€ || 1 = 0,00001€',
    )
    amount_with_taxes: Optional[bool] = Field(
        None,
        description='Used when there is a difference of 1 cent when starting from the amount with taxes',
    )
    detail: Optional[str] = Field(
        None, description='Description of the product or service'
    )
    discount: Optional[Discount1] = None
    document: Optional[Union[Invoice, Quote]] = None
    id: Optional[int] = None
    metadata: Optional[List] = None
    product: Optional[Product] = None
    quantity: Optional[float] = Field(
        None, description='Quantity of product or service'
    )
    stock: Optional[ProductStock] = None
    style: Optional[Style] = None
    total_quantity: Optional[str] = Field(
        None, description='Information about total quantity to sell, only for display'
    )
    totals: Optional[Totals1] = None
    unity: Optional[str] = Field(
        None, description='Unity, hours, days, meters, liters..'
    )
    vat_percent: Optional[int] = Field(None, description='VAT rate in cents')


class SinaoOrganization(OrganizationIdentity):
    app: Optional[App] = None


class UserPolicy(BaseModel):
    app: Optional[App] = None
    policy_profile: Optional[PolicyProfile] = None
    user: Optional[User] = None


class AppsGetResponse(RootModel[List[App]]):
    root: List[App]


class AppsAppIdAccessInviteGetResponse(RootModel[List[AccessInvitation]]):
    root: List[AccessInvitation]


class AppsAppIdInvoicesGetResponse(RootModel[List[Invoice]]):
    root: List[Invoice]


class Content(RootModel[List[SalesLine]]):
    root: List[SalesLine]


class Data1(RootModel[List[Invoice]]):
    root: List[Invoice]


class AppsAppIdOrganizationGetResponse(RootModel[List[SinaoOrganization]]):
    root: List[SinaoOrganization]


class AppsAppIdPaymentsGetResponse(RootModel[List[Payment]]):
    root: List[Payment]


class AppsAppIdProductcategoryGetResponse(RootModel[List[ProductCategory]]):
    root: List[ProductCategory]


class AppsAppIdProductsGetResponse(RootModel[List[Product]]):
    root: List[Product]


class Data4(RootModel[List[Product]]):
    root: List[Product]


class AppsAppIdProductstocksGetResponse(RootModel[List[ProductStock]]):
    root: List[ProductStock]


class AppsAppIdQuotesGetResponse(RootModel[List[Quote]]):
    root: List[Quote]


class Data6(RootModel[List[Quote]]):
    root: List[Quote]


class AppsAppIdRecurringinvoicesGetResponse(RootModel[List[RecurringInvoice]]):
    root: List[RecurringInvoice]


class Content4(RootModel[Optional[List[SalesLine]]]):
    root: Optional[List[SalesLine]] = None


class Data8(RootModel[List[RecurringInvoice]]):
    root: List[RecurringInvoice]


class AppsAppIdRecurringinvoicesIdPlanGetResponse(RootModel[List[Invoice]]):
    root: List[Invoice]


class AppsAppIdSalesdocumentmodelsGetResponse(RootModel[List[SalesDocumentModel]]):
    root: List[SalesDocumentModel]


class Content6(RootModel[List[SalesLine]]):
    root: List[SalesLine]


class AppsAppIdStatisticsTimetableSalesGetResponseItem(BaseModel):
    balance: Optional[int] = None
    count: Optional[int] = None
    data: Optional[List[Invoice]] = None
    interval: Optional[List[datetime]] = None


class AppsAppIdStatisticsTimetableSalesGetResponse(
    RootModel[List[AppsAppIdStatisticsTimetableSalesGetResponseItem]]
):
    root: List[AppsAppIdStatisticsTimetableSalesGetResponseItem]


class Invoice(SalesDocumentContract):
    avoid_of: Optional[Invoice] = None
    delivered_at: Optional[datetime] = None
    downpayments: Optional[List[Invoice]] = None
    invoice_of: Optional[Quote] = None
    paid_at: Optional[datetime] = None
    payment_methods: Optional[str] = Field(
        None,
        description='Accepted methods of payment for this invoice. Methods comma separated',
    )
    payment_period: Optional[int] = Field(
        None, description='Days count before considere this invoice as late'
    )
    related_recurring_invoice: Optional[RecurringInvoice] = None
    sepa_direct_debit_exported_at: Optional[datetime] = None
    status: Optional[Status] = None


class Quote(SalesDocumentContract):
    commercialvalidity_deadline: Optional[datetime] = None
    status: Optional[Status2] = None


class RecurringInvoice(SalesDocumentContract):
    content: Optional[List[SalesLine]] = None
    discount: Optional[int] = None
    discount_end_at: Optional[datetime] = None
    discount_mode: Optional[str] = None
    discount_start_at: Optional[datetime] = None
    end_at: Optional[datetime] = None
    frequency_count: Optional[int] = None
    frequency_duration: Optional[str] = None
    id: Optional[int] = None
    next_invoice_at: Optional[datetime] = None
    orders_plan: Optional[List[OrdersPlanItem]] = None
    saving_status: Optional[str] = None


CashflowSource.model_rebuild()
AccessInvitation.model_rebuild()
App.model_rebuild()
Payment.model_rebuild()
Product.model_rebuild()
ProductStock.model_rebuild()
ProductStocksMovement.model_rebuild()
SalesDocumentContract.model_rebuild()
SalesDocumentModel.model_rebuild()
SalesLine.model_rebuild()
AppsAppIdInvoicesGetResponse.model_rebuild()
Data1.model_rebuild()
AppsAppIdQuotesGetResponse.model_rebuild()
Data6.model_rebuild()
AppsAppIdRecurringinvoicesGetResponse.model_rebuild()
Data8.model_rebuild()
AppsAppIdRecurringinvoicesIdPlanGetResponse.model_rebuild()
AppsAppIdStatisticsTimetableSalesGetResponseItem.model_rebuild()
Invoice.model_rebuild()
Quote.model_rebuild()
RecurringInvoice.model_rebuild()
